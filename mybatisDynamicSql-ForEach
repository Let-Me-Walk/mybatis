mtbatis.xml文件：

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--settings是控制mybatis全局行为的，此处为输出日志功能    -->
    <settings>
        <setting name="LogImpl" value="STDOUT_LOGGING"/>
    </settings>
    <!-- 数据库连接环境的配置-->
    <environments default="development">
        <environment id="development">
            <!--
            transactionManager:mybatis提交事务、回滚事务的方式
            Type：处理事务的类型，选项有JDBC or MANAGED
            1.JDBC：表示mybatis底层调用的是JDBC中Connection对象处理事务的，包括commit、rollback；
            2.MANAGED：表示将mybatis事务处理委托给其他的容器（服务器软件、框架等）
            -->
            <transactionManager type="JDBC" />
            <!--
            dataSource：表示数据源，java体系中，规定实现了javax.sql.DataSource接口的都是数据源

           type：指定数据源的类型；
                1）POOLED：使用连接池，mybatis会创建PooledDataSource类；
                2）UNPOOLED：不使用连接池，在每次使用时先创建连接，执行sql，再关闭连接
                   mybaits会创建一个UnPooledDataSource，管理Connection对象的使用
                3）JNDI：java命名和目录服务（windows注册表）

             -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="jdbc:mysql://localhost:3306/ssm" />
                <property name="username" value="root" />
                <property name="password" value="password" />
            </dataSource>
        </environment>
    </environments>
    <!-- 引入SQL映射文件,Mapper映射文件,可写多个mapper标签-->

    <mappers>
     <!--mapper指定方式1，使用resource，一个包存在多个mapper文件时，需要一一指定   -->
        <mapper resource="com/ysLearning/dao/StudentDao.xml" />
        <mapper resource="com/ysLearning/dao/StudentDao2.xml" />
        <mapper resource="com/ysLearning/dao/StudentDao3.xml" />


     <!--mapper指定方式2：使用包名，同一个包下多个mapper文件，只需指定包得位置，mybatis就能全部找到
         name:xml文件（mapper文件）所在的包名，这个包下的所有xml文件一次性都能加载到mybatis中
         但使用package标签需要满足两个条件：
         1）：mapper文件名称需要与对应接口名称完全相同
         2）：mapper文件需要与对应的接口放在同一个目录下
     -->
        <package name="com.ysLearning.dao"/>
        <package name="com.ysLearning.dao1"/>
    </mappers>
</configuration>
      

StudentDao.XML

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ysLearning.dao.StudentDao">


<!--===================================DynamicSql-if================================================-->
<!--1. if<test="name!=null">
     name=#{}
     解析:当if条件的test判断为真时，会将name=#{name}加入到前面的sql语句中
-->

<!-- 使用java对象属性值作为判断条件：sql表属性=xxx值
     在where后面加入1=1的恒等条件是防止第一个if标签未传值时，导致sql语句变为 select id,name,email,age from student where or age>#{age}这种情况
     加入1=1条件后，name不传值时，sql变为select id,name,email,age from student where 1=1 or age>#{age}
     if单独用时存在上述这种缺陷！
 -->
    <select id="selectDynamicSqlIf" resultType="student">
        select id,name,email,age from student
        where 1=1
       <if test="name!=null and name!=' '">
           name=#{name}
       </if>
        <if test="age>0">
        and age>#{age}
        </if>

    </select>

<!-- 2.where标签，用来包含多个if标签的，当多个if有一个条件成立时，where标签会自动增加一个where关键字，并会去掉if中多余的and、or等
     <where> <if></if>....</where>
     下述Dynamic sql，当两个if test条件都成立时，sql语句为select id,name,email,age from student WHERE name=#{name} or age>#{age}
                      当只有第二个if test条件成立时，sql语句为select id,name,email,age from student WHERE  age>#{age}
                      当if条件都不满足时，sql语句为主语句select id,name,email,age from student
                      这样可以避免if中发生错误的和无效的sql拼接

  -->
    <select id="selectDynamicSqlIf" resultType="student">
        select id,name,email,age from student
        <where>
            <if test="name!=null and name!=' '">
                name=#{name}
            </if>
            <if test="age>0">
                or age>#{age}
            </if>
        </where>
    </select>

<!--3.<foreach>标签，主要是循环java中的数组、list集合的，主要用在sql的in语句中。当从测试方法中传入三个id值，如何将其传入到in（1001,1002，1003）中？
      foreach底层实现：字符串拼接；
         public void testFor(){
         List<Integer> list=new ArrayList<>();
         list.add(1001);
         list.add(1002);
         list.add(1003);

         //需拼接的主sql
        String sql="select *from student where id in";

        StringBuilder builder=new StringBuilder("");
        int init=0;
        int len=list.size();

        //开始用foreach循环拼接字符串
        builder.append("(");//相当于<foreach>标签中的open标签
        for (Integer i:list
             ) {
            builder.append(i).append(",");//i相当于item，“，”相当于separator
        }
        //循环结束
        builder.append(")");//相当于close；
        sql=sql=builder.toString();
        System.out.println("sql=="+sql);
    }



-->
<!-- foreach用法1，List<Integer>
     collection:表示接口中方法参数的类型，若为数组则使用array，若为list集合则为list，均小写
     item:自定义，表示要在foreach中遍历的数组和集合成员的变量
     open:循环开始时的字符，类似（
     close:循环结束时的字符类似）
     operator:集合成员之间的间隔符类似 ，
-->
    <select id="selectForEachOne" resultType="student">
        select *from student where id in
        <foreach collection="list" item="myid" open="(" close=")" separator=",">
        #{myid}
        </foreach>
    </select>

    <!-- foreach用法2，传入参数类型为Student对象

-->
    <select id="selectForEachTwo" resultType="student">
        select *from student where id in
        <foreach collection="list" item="myid" open="(" close=")" separator=",">
            #{stu.id}
        </foreach>
    </select>


<!--  代码片段：可复用的一段代码，用<sql "id=""">定义，需要用时用<include refid="id">复现代码-->
    <sql id="studentSql">
        select *from student
    </sql>

    <select id="selectReFid" resultType="student">
        <include refid="studentSql"/>
        <where>
            <if test="id!=0">

                <foreach collection="" open="" item="" close="" separator="">
                #{stuId},
                </foreach>
            </if>


        </where>

    </select>
</mapper>

      
        
