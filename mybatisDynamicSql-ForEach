<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ysLearning.dao.StudentDao">


<!--===================================DynamicSql-if================================================-->
<!--1. if<test="name!=null">
     name=#{}
     解析:当if条件的test判断为真时，会将name=#{name}加入到前面的sql语句中
-->

<!-- 使用java对象属性值作为判断条件：sql表属性=xxx值
     在where后面加入1=1的恒等条件是防止第一个if标签未传值时，导致sql语句变为 select id,name,email,age from student where or age>#{age}这种情况
     加入1=1条件后，name不传值时，sql变为select id,name,email,age from student where 1=1 or age>#{age}
     if单独用时存在上述这种缺陷！
 -->
    <select id="selectDynamicSqlIf" resultType="student">
        select id,name,email,age from student
        where 1=1
       <if test="name!=null and name!=' '">
           name=#{name}
       </if>
        <if test="age>0">
        and age>#{age}
        </if>

    </select>

<!-- 2.where标签，用来包含多个if标签的，当多个if有一个条件成立时，where标签会自动增加一个where关键字，并会去掉if中多余的and、or等
     <where> <if></if>....</where>
     下述Dynamic sql，当两个if test条件都成立时，sql语句为select id,name,email,age from student WHERE name=#{name} or age>#{age}
                      当只有第二个if test条件成立时，sql语句为select id,name,email,age from student WHERE  age>#{age}
                      当if条件都不满足时，sql语句为主语句select id,name,email,age from student
                      这样可以避免if中发生错误的和无效的sql拼接

  -->
    <select id="selectDynamicSqlIf" resultType="student">
        select id,name,email,age from student
        <where>
            <if test="name!=null and name!=' '">
                name=#{name}
            </if>
            <if test="age>0">
                or age>#{age}
            </if>
        </where>
    </select>

<!--3.<foreach>标签，主要是循环java中的数组、list集合的，主要用在sql的in语句中。当从测试方法中传入三个id值，如何将其传入到in（1001,1002，1003）中？
      foreach底层实现：字符串拼接；
         public void testFor(){
         List<Integer> list=new ArrayList<>();
         list.add(1001);
         list.add(1002);
         list.add(1003);

         //需拼接的主sql
        String sql="select *from student where id in";

        StringBuilder builder=new StringBuilder("");
        int init=0;
        int len=list.size();

        //开始用foreach循环拼接字符串
        builder.append("(");//相当于<foreach>标签中的open标签
        for (Integer i:list
             ) {
            builder.append(i).append(",");//i相当于item，“，”相当于separator
        }
        //循环结束
        builder.append(")");//相当于close；
        sql=sql=builder.toString();
        System.out.println("sql=="+sql);
    }



-->
<!-- foreach用法1，List<Integer>
     collection:表示接口中方法参数的类型，若为数组则使用array，若为list集合则为list，均小写
     item:自定义，表示要在foreach中遍历的数组和集合成员的变量
     open:循环开始时的字符，类似（
     close:循环结束时的字符类似）
     operator:集合成员之间的间隔符类似 ，
-->
    <select id="selectForEachOne" resultType="student">
        select *from student where id in
        <foreach collection="list" item="myid" open="(" close=")" separator=",">
        #{myid}
        </foreach>
    </select>

    <!-- foreach用法2，传入参数类型为Student对象

-->
    <select id="selectForEachTwo" resultType="student">
        select *from student where id in
        <foreach collection="list" item="myid" open="(" close=")" separator=",">
            #{stu.id}
        </foreach>
    </select>
</mapper>

      
      
        
